{
  "contractName": "SuperTokenStorageTester",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "state",
          "type": "bytes"
        }
      ],
      "name": "AgreementAccountStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "AgreementLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "AgreementStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "AgreementTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDowngraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STANDARD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "downgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountActiveAgreements",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementData",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementStateSlot",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHost",
      "outputs": [
        {
          "internalType": "address",
          "name": "host",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlayingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract ISuperfluid",
          "name": "host",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountInsolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "liquidateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationDowngrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "realtimeBalanceOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "realtimeBalanceOfNow",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "settleBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "terminateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementStateSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validate",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"state\",\"type\":\"bytes\"}],\"name\":\"AgreementAccountStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STANDARD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlayingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountInsolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"liquidateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationDowngrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Test SuperTokenStorag Layout changes\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"ERC20.balanceOf implementation\"},\"createAgreement(bytes32,bytes32[])\":{\"details\":\"ISuperToken.createAgreement implementation\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: SuperToken always uses 18 decimals. Note: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"downgrade(uint256)\":{\"details\":\"ISuperToken.downgrade implementation\"},\"getAccountActiveAgreements(address)\":{\"details\":\"ISuperToken.getAccountActiveAgreements implementation\"},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"ISuperToken.getAgreementData implementation\"},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"ISuperToken.getAgreementState implementation\"},\"getCodeAddress()\":{\"details\":\"Get current implementation code address.\"},\"getHost()\":{\"details\":\"Get the contract address that is hosting this token.\",\"returns\":{\"host\":\"Superfluid host contract address\"}},\"getUnderlayingToken()\":{\"details\":\"ISuperfluidGovernance.getUnderlayingToken implementation\"},\"isAccountInsolvent(address)\":{\"details\":\"ISuperToken.isAccountInsolvent implementation\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"liquidateAgreement(address,bytes32,address,uint256)\":{\"details\":\"ISuperToken.liquidateAgreement implementation\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operationApprove(address,address,uint256)\":{\"details\":\"Perform ERC20 approve by host contract.\",\"params\":{\"account\":\"The account owner to be approved.\",\"amount\":\"Number of tokens to be approved.\",\"spender\":\"The spender of account owner's funds.\"}},\"operationDowngrade(address,uint256)\":{\"details\":\"Downgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\"}},\"operationTransferFrom(address,address,address,uint256)\":{\"details\":\"Perform ERC20 transfer from by host contract.\",\"params\":{\"account\":\"The account to spend sender's funds.\",\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of thefunds.\",\"sender\":\"The account where the funds is sent from.\"}},\"operationUpgrade(address,uint256)\":{\"details\":\"Upgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading.\"},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"ISuperToken.realtimeBalanceOf implementation\"},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block.timestamp\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"settleBalance(address,int256)\":{\"details\":\"Settle balance from an account by the agreement.      The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"ISuperToken.terminateAgreement implementation\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"ISuperToken.updateAgreementData implementation\"},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"details\":\"ISuperToken.updateAgreementState implementation\"},\"upgrade(uint256)\":{\"details\":\"ISuperToken.upgrade implementation\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/test/SuperTokenStorageTester.sol\":\"SuperTokenStorageTester\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x1d809d0906b35e446a3ff62841888d90011a1d267c91b5d107add35f4ad73636\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5fb17f9578022bea0deec865ee11eaa0a281baac2a644467c8c4c458e991ca91\",\"dweb:/ipfs/Qmf6dNUciHJaMYoAJxtP6JGL6KjPgbCVKHUJdqhZ1fs9Dx\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0x1515ee00700f5ae5cece8dda6d62e0c12056176dc2c41933487ba11b8aaa743b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0840cdf8e3c6545b76b60c205c03abc011b8ede8256c5d5a65476de4584a5f5\",\"dweb:/ipfs/Qmf6JcWedy2BxmzN5xFJ86SwfxGEX81Ac3Rza8NdqWj19H\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0x8a71d633e698727749295ee6abaf6c37fa42f1b77b2d222d1a4eaffa208c8c49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47a2af58bed4fbffc85650b99d913105ca8988962ace76153dedd00d4bc3ca8a\",\"dweb:/ipfs/QmPZ5vHgUaUADJFVN6LnFzQgh28UzK1Lt7F6cFDTcWBE8W\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0x52706cd9abefd5879dcebd1bc098a520bcf9d0a1a525ef32e2a6bd614f580090\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6acc843e7bed925c0fc43a2a1b00b84d17b1ad0a62ac12860903f2c6cb9b520e\",\"dweb:/ipfs/QmXDBZJEiTdotFkE7DuL6x4ZF1xiarcy3pEhpX7sihDwhc\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x7e4abf6fec6907b760c2289e863a08d52f11e887abe20435be8be45f4d2f9f74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6ea4c169ee533273ece99c417cdfbf0491e43bce616be184b56ccf61de25b34\",\"dweb:/ipfs/QmU2k9gEsynrXzfE9cehUXSyWjqoxiYhNBPmBfiAVduRnC\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0xf1fc334274dc956d0508ab5d3037979de789e9e858ecc346b87cdec472d7261b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://950a5fd2942ee58611ea24bbe23d0e6cbb83f6e5c32384134c85f179c373dbb1\",\"dweb:/ipfs/QmdcZkqVuxTu5C5NhpbSXYunUDkZbcs8NMxBW1EYtThAtY\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/superfluid/SuperAppDefinitions.sol\":{\"keccak256\":\"0x1a5356278b5f0f2100e7d3db525a9c20d303cc0de571e53123cb7fd9485e9bfb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4bee42a2ce61d07d84b18c36e1683d1f0a713883caa41698282aa3d64a876ae2\",\"dweb:/ipfs/QmXmnuEpXunMGYBZhraHa2bLit4dNqhnhfD6cQ1w6zucmB\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0x40fb60ef5e1b09749d796da8d095a884418eec5a5cf753a8b3ba40d4fa62a450\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://435699cbab16375d49e4311a96ac4218bb752e4456c7512962259ab1cf452637\",\"dweb:/ipfs/QmTUKuFRhB2UfkRM3iEJjh1b1F2takvbppVvuJU8jH6BAF\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0xa60ff361f5c525b21081288ebee8ed4d68f8b5b8e86d8138198d046141fba35c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e3239450da65109f576d28fc11cb0df7ce7aa8a41566a5f0ef97a7c8a1f3a55\",\"dweb:/ipfs/QmQcjb6dNQELxPWq12x21Cd18TbYszPNxFMXxYpXGC1Wi8\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/superfluid/SuperToken.sol\":{\"keccak256\":\"0x90a4b47d9cb9c6bd703d2bf1a857e858a630389e8e6d7e2b23b44c0d59433f4f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f520165ebd06d0b07285b73db51aaed1bf3222905b4b4e5e7664ecd4e997ac88\",\"dweb:/ipfs/QmdWec3HY8z5PaCL4ozy327fRfXUmWtzT6PBLQTmPuRQzV\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/test/SuperTokenStorageTester.sol\":{\"keccak256\":\"0x97816220ed05c21e7b457156453c73b42f40b84fd25f45f6f08402d14db00759\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://529856563946bc2e46a3f0bb5282ac32c7e15c6b1d3adb07edd9655a954e2ffd\",\"dweb:/ipfs/QmScRMy6shiEX4sxceQRDjwabPZpmZ9HjEgL5dpMkcf9D4\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/upgradability/Proxiable.sol\":{\"keccak256\":\"0x51d2c00317c8c6fb90b2dcf9578da8f2df14a857c26d8ab0060b5b6d95a14162\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7cf5d604a863d497dcfc3e780f4b863fffb113b306a60e672362b13df443453e\",\"dweb:/ipfs/QmYtr3foitBcyc9LsbhxMMK2uJGXxAdnmYKw4oUAaUcnMT\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/upgradability/Proxy.sol\":{\"keccak256\":\"0xf9dbe1f9395d4346826ac3eb5e8fe19839de7056b27ae642521856b8225a7b7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98afb08f2457daaed853ee5ddead49690f1d74a748065476f075526dac345141\",\"dweb:/ipfs/QmevKozaDcvtsDqhq7qFrtN2wkhWnQLuvdxMHTFENdGrHR\"]},\"/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/upgradability/ProxyUtils.sol\":{\"keccak256\":\"0x34c692cb060d21fe40af5d6c6ddb2b4b9e52ffb6e44340195c7b91cbf664feca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e2df14a12f9d4dfb780f75942e5ee5aa727e08b0f32f2950eb8816868f0c915\",\"dweb:/ipfs/QmdWakruAjcgqMkQBrJF9EffMnjaByCfygtDRrs3XnzSfA\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26e50e3f7b6482fb6f598f2e006994a74aa492687daa4b3eee7fd4fb5398ce7f\",\"dweb:/ipfs/QmZudqoPSkA4USLMFsBBmt19dDPZFS8aaAmL5R7pECXu6t\"]},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://03481543f67d854c94f73b006609ccd0e11a2461837296bf9d27b14b4bde7de6\",\"dweb:/ipfs/QmVt8ZoWv6jPdtoo5zikqrj7ijDvKoQ4BWYiufctStkXd3\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d0913dfbfce90d170df0d496ad7596c0778518e5fa7aba6c32562522546f66b\",\"dweb:/ipfs/QmR6B8nLj2PJf5e1JWD9Nk7ErkAwkqUwadCnvE82FJr1RU\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fdf806100206000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806362aa52871161013b578063a1b2bf8b116100b8578063cf97256d1161007c578063cf97256d14610977578063dd62ed3e146109a3578063eb3537cc146109d1578063f2fde38b146109fd578063f3c70aad14610a2357610248565b8063a1b2bf8b146107a5578063a3a7e7f31461081a578063a9059cbb14610840578063b6f972261461086c578063ca7894641461094b57610248565b80638960bb19116100ff5780638960bb191461072d5780638da5cb5b146107675780638f32d59b1461076f5780638fb4c9951461077757806395d89b411461079d57610248565b806362aa52871461068f5780636901f668146106c55780636c2d9f2f146106cd57806370a08231146106ff578063715018a61461072557610248565b806327048397116101c957806345977d031161018d57806345977d0314610600578063469519541461061d5780634b61cc331461064357806350d75d251461067f57806352d1902d1461068757610248565b806327048397146104fd5780632ec8eec714610520578063313ce56714610564578063386fa221146105825780633f3dc491146105f857610248565b806316d055d61161021057806316d055d61461042157806318160ddd1461045d57806320bc44251461047757806323b872dd1461049b578063245887fc146104d157610248565b806306fdde031461024d578063090c415e146102ca578063095ea7b31461034f57806311bcc81e1461038f57806312a6a3f8146103ac575b600080fd5b610255610a2b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028f578181015183820152602001610277565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61034d600480360360608110156102e057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561030f57600080fd5b82018360208201111561032157600080fd5b803590602001918460208302840111600160201b8311171561034257600080fd5b509092509050610abe565b005b61037b6004803603604081101561036557600080fd5b506001600160a01b038135169060200135610cd0565b604080519115158252519081900360200190f35b61034d600480360360208110156103a557600080fd5b5035610ce6565b61034d600480360360408110156103c257600080fd5b81359190810190604081016020820135600160201b8111156103e357600080fd5b8201836020820111156103f557600080fd5b803590602001918460208302840111600160201b8311171561041657600080fd5b509092509050610cf3565b61034d6004803603608081101561043757600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610f30565b610465610fb9565b60408051918252519081900360200190f35b61047f611035565b604080516001600160a01b039092168252519081900360200190f35b61037b600480360360608110156104b157600080fd5b506001600160a01b03813581169160208101359091169060400135611044565b61034d600480360360408110156104e757600080fd5b506001600160a01b03813516906020013561105c565b61034d6004803603604081101561051357600080fd5b50803590602001356110b7565b6105466004803603602081101561053657600080fd5b50356001600160a01b0316611281565b60408051938452602084019290925282820152519081900360600190f35b61056c61129d565b6040805160ff9092168252519081900360200190f35b6105a86004803603602081101561059857600080fd5b50356001600160a01b03166112a2565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105e45781810151838201526020016105cc565b505050509050019250505060405180910390f35b61047f61143b565b61034d6004803603602081101561061657600080fd5b503561144a565b61034d6004803603602081101561063357600080fd5b50356001600160a01b0316611454565b6105a86004803603608081101561065957600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356114b6565b61047f611534565b610465611543565b61034d600480360360608110156106a557600080fd5b506001600160a01b03813581169160208101359091169060400135611567565b61034d6115c4565b6105a8600480360360608110156106e357600080fd5b506001600160a01b0381351690602081013590604001356115cd565b6104656004803603602081101561071557600080fd5b50356001600160a01b031661163c565b61034d611665565b61034d6004803603608081101561074357600080fd5b506001600160a01b0381358116916020810135916040820135169060600135611708565b61047f611b15565b61037b611b24565b61037b6004803603602081101561078d57600080fd5b50356001600160a01b0316611b35565b610255611b4e565b61034d600480360360408110156107bb57600080fd5b81359190810190604081016020820135600160201b8111156107dc57600080fd5b8201836020820111156107ee57600080fd5b803590602001918460208302840111600160201b8311171561080f57600080fd5b509092509050611baf565b61034d6004803603602081101561083057600080fd5b50356001600160a01b0316611dec565b61037b6004803603604081101561085657600080fd5b506001600160a01b038135169060200135611dff565b61034d600480360360a081101561088257600080fd5b6001600160a01b038235169160ff60208201351691810190606081016040820135600160201b8111156108b457600080fd5b8201836020820111156108c657600080fd5b803590602001918460018302840111600160201b831117156108e757600080fd5b919390929091602081019035600160201b81111561090457600080fd5b82018360208201111561091657600080fd5b803590602001918460018302840111600160201b8311171561093757600080fd5b9193509150356001600160a01b0316611e0c565b61034d6004803603604081101561096157600080fd5b506001600160a01b038135169060200135611eeb565b61034d6004803603604081101561098d57600080fd5b506001600160a01b038135169060200135611f42565b610465600480360360408110156109b957600080fd5b506001600160a01b03813581169160200135166120b3565b610546600480360360408110156109e757600080fd5b506001600160a01b0381351690602001356120de565b61034d60048036036020811015610a1357600080fd5b50356001600160a01b03166120fb565b61056c61215d565b60028054604080516020601f6000196101006001871615020190941685900493840181900481028201810190925282815260609390929091830182828015610ab45780601f10610a8957610100808354040283529160200191610ab4565b820191906000526020600020905b815481529060010190602001808311610a9757829003601f168201915b5050505050905090565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d6020811015610b3857600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d6020811015610bae57600080fd5b5051610beb5760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b6040805133818301526001600160a01b03871660608201526080808201879052602080830191909152600e60a08301526d41677265656d656e74537461746560901b60c0808401919091528351808403909101815260e08301808552815191830191909120610100928702808501840190955286825293610c88938593899289928392019084908082843760009201919091525061216292505050565b6040805186815290516001600160a01b0388169133917f30f416fa68fca014a0f334464c64b000ba53e99b6d2afdea9d5ca756372d59859181900360200190a3505050505050565b6000610cdd338484612194565b50600192915050565b610cf033826122ac565b50565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d6020811015610d6d57600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b158015610db957600080fd5b505afa158015610dcd573d6000803e3d6000fd5b505050506040513d6020811015610de357600080fd5b5051610e205760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b60408051338183018190526060808301889052602080840191909152600d60808401526c41677265656d656e744461746160981b60a0808501919091528451808503909101815260c0840180865281519183019190912060e0928802808601840190965287825292949293610eb39385938a928a9283929091019084908082843760009201919091525061216292505050565b816001600160a01b03167f770ea40a13a4644573ed785e5c7116890709947918747febc5add46feb531e2d87878760405180848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a2505050505050565b6004546001600160a01b03163314610f7d576040805162461bcd60e51b815260206004820152601e6024820152600080516020612f12833981519152604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b03161415610fa757610fa28483836123d2565b610fb3565b610fb384848484612538565b50505050565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561100457600080fd5b505afa158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b5051905090565b6004546001600160a01b031690565b600061105233858585612538565b5060019392505050565b6004546001600160a01b031633146110a9576040805162461bcd60e51b815260206004820152601e6024820152600080516020612f12833981519152604482015290519081900360640190fd5b6110b382826122ac565b5050565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d602081101561113157600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b15801561117d57600080fd5b505afa158015611191573d6000803e3d6000fd5b505050506040513d60208110156111a757600080fd5b50516111e45760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b60408051338183018190526060808301879052602080840191909152600d60808401526c41677265656d656e744461746160981b60a0808501919091528451808503909101815260c0909301909352815191909201206112448185612597565b60408051868152905133917f71a63dc095de07aa5512ad57a7596a39516317e316981a1cd71000057be1537b919081900360200190a25050505050565b600080600061129084426120de565b9250925092509193909250565b601290565b600480546040805163289b3c0d60e01b815290516060936000936001600160a01b03169263289b3c0d9281830192602092829003018186803b1580156112e757600080fd5b505afa1580156112fb573d6000803e3d6000fd5b505050506040513d602081101561131157600080fd5b50516001600160a01b0384811660009081526007602052604080822054815163bebb6f2f60e01b81529019600482015290519394509184169263bebb6f2f926024808201939291829003018186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113a957600080fd5b8101908080516040519392919084600160201b8211156113c857600080fd5b9083019060208201858111156113dd57600080fd5b82518660208202830111600160201b821117156113f957600080fd5b82525081516020918201928201910280838360005b8381101561142657818101518382015260200161140e565b50505050905001604052505050915050919050565b6001546001600160a01b031690565b610cf033826125b0565b61145c611b24565b6114ad576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610cf081612695565b604080516001600160a01b038087168284015285166060828101919091526080808301869052602080840191909152600e60a08401526d41677265656d656e74537461746560901b60c0808501919091528451808503909101815260e09093019093528151919092012061152a818461275d565b9695505050505050565b600061153e6127de565b905090565b7f6bfbb132610e56cb96575dba244667b9d6dbfeffe22b68a79fa16f2d18eb001990565b6004546001600160a01b031633146115b4576040805162461bcd60e51b815260206004820152601e6024820152600080516020612f12833981519152604482015290519081900360640190fd5b6115bf838383612194565b505050565b600760006110b3565b604080516001600160a01b0385168183015260608181018590526020808301829052600d60808401526c41677265656d656e744461746160981b60a0808501919091528451808503909101815260c090930190935281519190920120611633818461275d565b95945050505050565b6000806116498342612803565b505090506000811261165b578061165e565b60005b9392505050565b61166d611b24565b6116be576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175857600080fd5b505afa15801561176c573d6000803e3d6000fd5b505050506040513d602081101561178257600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b1580156117ce57600080fd5b505afa1580156117e2573d6000803e3d6000fd5b505050506040513d60208110156117f857600080fd5b50516118355760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188557600080fd5b505afa158015611899573d6000803e3d6000fd5b505050506040513d60208110156118af57600080fd5b5051604080516301c64fdd60e31b815230600482015290519192506000916001600160a01b03841691630e327ee8916024808301926020929190829003018186803b1580156118fd57600080fd5b505afa158015611911573d6000803e3d6000fd5b505050506040513d602081101561192757600080fd5b505190506001600160a01b03811661193c5750855b600061194886426120de565b509091506000905061195a8287612953565b90506000811315611a1b576001600160a01b0383166000908152600560205260409020546119889087612953565b6001600160a01b0380851660009081526005602052604080822093909355908916815220546119b790876129b8565b6001600160a01b038089166000818152600560209081526040918290209490945580518c81529384018a9052805192871693919233927f8505c3d8f1f184f032cf0bc4cd80ee61c8b9d94f8907c3281bf0101a2610fe8092908290030190a4611b0a565b6001600160a01b038916600090815260056020526040902054611a3e9087612953565b6001600160a01b03808b166000908152600560205260408082209390935590891681522054611a79908790611a7390856129b8565b906129b8565b6001600160a01b038089166000908152600560205260408082209390935590851681522054611aa89083612953565b6001600160a01b038085166000908152600560209081526040918290209390935580518b815292830189905280518c831693928b169233927f8505c3d8f1f184f032cf0bc4cd80ee61c8b9d94f8907c3281bf0101a2610fe8092918290030190a45b505050505050505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b600080611b4283426120de565b50506000139392505050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ab45780601f10610a8957610100808354040283529160200191610ab4565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bff57600080fd5b505afa158015611c13573d6000803e3d6000fd5b505050506040513d6020811015611c2957600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b158015611c7557600080fd5b505afa158015611c89573d6000803e3d6000fd5b505050506040513d6020811015611c9f57600080fd5b5051611cdc5760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b60408051338183018190526060808301889052602080840191909152600d60808401526c41677265656d656e744461746160981b60a0808501919091528451808503909101815260c0840180865281519183019190912060e0928802808601840190965287825292949293611d6f9385938a928a9283929091019084908082843760009201919091525061216292505050565b336001600160a01b03167f0c4c547b3a4fcaa5be8353b3111472b124155bccc86de811d4a481c9e6e9faca87878760405180848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a2505050505050565b610cf03382611dfa3361163c565b6123d2565b6000610cdd3384846123d2565b600054600160a01b900460ff1615611e61576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b600080546001600160a01b031960ff60a01b19918216600160a01b908117821633179093556001805460ff8b169094026001600160a01b038c169490921693909317909116179055611eb560028686612e15565b50611ec260038484612e15565b50600480546001600160a01b0319166001600160a01b0392909216919091179055505050505050565b6004546001600160a01b03163314611f38576040805162461bcd60e51b815260206004820152601e6024820152600080516020612f12833981519152604482015290519081900360640190fd5b6110b382826125b0565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d6020811015611fbc57600080fd5b50516040805163f9029be560e01b815233600482015290519192506001600160a01b0383169163f9029be591602480820192602092909190829003018186803b15801561200857600080fd5b505afa15801561201c573d6000803e3d6000fd5b505050506040513d602081101561203257600080fd5b505161206f5760405162461bcd60e51b8152600401808060200182810382526022815260200180612ecf6022913960400191505060405180910390fd5b6001600160a01b0383166000908152600560205260409020546120929083612953565b6001600160a01b039093166000908152600560205260409020929092555050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b60008060006120ed8585612803565b919790965090945092505050565b612103611b24565b612154576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610cf081612a1d565b601281565b60005b81518110156115bf57600082828151811061217c57fe5b60209081029190910101518483015550600101612165565b6001600160a01b0383166121ef576040805162461bcd60e51b815260206004820152601960248201527f617070726f76652066726f6d207a65726f206164647265737300000000000000604482015290519081900360640190fd5b6001600160a01b03821661224a576040805162461bcd60e51b815260206004820152601760248201527f617070726f766520746f207a65726f2061646472657373000000000000000000604482015290519081900360640190fd5b6001600160a01b03808416600081815260066020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b806122b68361163c565b10156122f35760405162461bcd60e51b815260040180806020018281038252602c815260200180612f7e602c913960400191505060405180910390fd5b60006122fe82612abd565b9250905061230c8383612b4f565b6001546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b505050506040513d602081101561238c57600080fd5b50506040805183815290516001600160a01b038516917f3bc27981aebbb57f9247dc00fde9d6cd91e4b230083fec3238fedbcba1f9ab3d919081900360200190a2505050565b6001600160a01b03821661242d576040805162461bcd60e51b815260206004820152601860248201527f7472616e7366657220746f207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b806124378461163c565b101561248a576040805162461bcd60e51b815260206004820152601f60248201527f7472616e7366657220616d6f756e7420657863656564732062616c616e636500604482015290519081900360640190fd5b6001600160a01b0383166000908152600560205260409020546124ad90826129b8565b6001600160a01b0380851660009081526005602052604080822093909355908416815220546124dc9082612953565b6001600160a01b0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6125438383836123d2565b610fb3838561259284604051806060016040528060288152602001612f32602891396001600160a01b03808a166000908152600660209081526040808320938e16835292905220549190612c1d565b612194565b60005b818110156115bf5760008382015560010161259a565b60006125bb82612abd565b600154604080516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201869052915193965093945016916323b872dd9160648083019260209291908290030181600087803b15801561261a57600080fd5b505af115801561262e573d6000803e3d6000fd5b505050506040513d602081101561264457600080fd5b5061265190508383612cb4565b6040805183815290516001600160a01b038516917f25ca84076773b0455db53621c459ddc84fe40840e4932a62706a032566f399df919081900360200190a2505050565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ce57600080fd5b505afa1580156126e2573d6000803e3d6000fd5b505050506040513d60208110156126f857600080fd5b5051612702611543565b14612754576040805162461bcd60e51b815260206004820152601960248201527f50726f786961626c653a204e4f545f434f4d50415449424c4500000000000000604482015290519081900360640190fd5b610cf081612d81565b60608167ffffffffffffffff8111801561277657600080fd5b506040519080825280602002602001820160405280156127a0578160200160208202803683370190505b50905060005b828110156127d7576000818501549050808383815181106127c357fe5b6020908102919091010152506001016127a6565b5092915050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b03821660009081526005602052604081205481908190606061282b876112a2565b905060005b815181101561292a57600080600084848151811061284a57fe5b60200260200101516001600160a01b0316639b2e48bc308d8d6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060606040518083038186803b1580156128b757600080fd5b505afa1580156128cb573d6000803e3d6000fd5b505050506040513d60608110156128e157600080fd5b508051602082015160409092015190945090925090506129018684612953565b955061290d8883612da5565b97506129198782612da5565b965050600190920191506128309050565b506129486129388585612dff565b61294284876129b8565b90612953565b945050509250925092565b60008282018183128015906129685750838112155b8061297d575060008312801561297d57508381125b61165e5760405162461bcd60e51b8152600401808060200182810382526021815260200180612ef16021913960400191505060405180910390fd5b60008183038183128015906129cd5750838113155b806129e257506000831280156129e257508381135b61165e5760405162461bcd60e51b8152600401808060200182810382526024815260200180612f5a6024913960400191505060405180910390fd5b6001600160a01b038116612a625760405162461bcd60e51b8152600401808060200182810382526026815260200180612ea96026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600154600090819081906012600160a01b90910460ff161015612b07575060015460ff600160a01b909104811660120316600a0a808481612afa57fe5b0492508083029150612b49565b6001546012600160a01b90910460ff161115612b4257505060015460111960ff600160a01b90920482160116600a0a82810291508290612b49565b8391508192505b50915091565b6001600160a01b038216612ba3576040805162461bcd60e51b81526020600482015260166024820152756275726e2066726f6d207a65726f206164647265737360501b604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054612bc690826129b8565b6001600160a01b0383166000818152600560209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60008184841115612cac5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c71578181015183820152602001612c59565b50505050905090810190601f168015612c9e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216612d06576040805162461bcd60e51b81526020600482015260146024820152736d696e7420746f207a65726f206164647265737360601b604482015290519081900360640190fd5b6001600160a01b038216600090815260056020526040902054612d299082612953565b6001600160a01b03831660008181526005602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b60008282018381101561165e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818310612e0e578161165e565b5090919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e565782800160ff19823516178555612e83565b82800160010185558215612e83579182015b82811115612e83578235825591602001919060010190612e68565b50612e8f929150612e93565b5090565b5b80821115612e8f5760008155600101612e9456fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353463a204f6e6c79206c6973746564206167726565656d656e7420616c6c6f7765645369676e6564536166654d6174683a206164646974696f6e206f766572666c6f7753463a204f6e6c7920686f737420636f6e747261637420616c6c6f776564000045524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775375706572546f6b656e3a20646f776e677261646520616d6f756e7420657863656564732062616c616e6365a2646970667358221220674d2a26a8bc1ea9df4edc099b9587bb31b8633ce87bc25529206ad7229a208f64736f6c63430007010033",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "189:2129:20:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "189:2129:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2889:92:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16052:471;;;;;;;;;;;;;;;;-1:-1:-1;;;;;16052:471:18;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;16052:471:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;16052:471:18;;;;;;;;;;-1:-1:-1;16052:471:18;;-1:-1:-1;16052:471:18;-1:-1:-1;16052:471:18;:::i;:::-;;5438:176;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5438:176:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;18073:100;;;;;;;;;;;;;;;;-1:-1:-1;18073:100:18;;:::i;12532:399::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;12532:399:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;12532:399:18;;;;;;;;;;-1:-1:-1;12532:399:18;;-1:-1:-1;12532:399:18;-1:-1:-1;12532:399:18;:::i;19738:365::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;19738:365:18;;;;;;;;;;;;;;;;;;;;;;:::i;4221:139::-;;;:::i;:::-;;;;;;;;;;;;;;;;20604:102;;;:::i;:::-;;;;-1:-1:-1;;;;;20604:102:18;;;;;;;;;;;;;;6074:206;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6074:206:18;;;;;;;;;;;;;;;;;:::i;20263:152::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;20263:152:18;;;;;;;;:::i;13802:354::-;;;;;;;;;;;;;;;;-1:-1:-1;13802:354:18;;;;;;;:::i;11863:255::-;;;;;;;;;;;;;;;;-1:-1:-1;11863:255:18;-1:-1:-1;;;;;11863:255:18;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;3870:102;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10876:272;;;;;;;;;;;;;;;;-1:-1:-1;10876:272:18;-1:-1:-1;;;;;10876:272:18;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17417:120;;;:::i;17591:96::-;;;;;;;;;;;;;;;;-1:-1:-1;17591:96:18;;:::i;2526:113::-;;;;;;;;;;;;;;;;-1:-1:-1;2526:113:18;-1:-1:-1;;;;;2526:113:18;;:::i;16587:370::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;16587:370:18;;;;;;;;;;;;;;;;;;;;;;:::i;306:120:24:-;;;:::i;2361:159:18:-;;;:::i;19528:204::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;19528:204:18;;;;;;;;;;;;;;;;;:::i;242:2074:20:-;;;:::i;12994:317:18:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;12994:317:18;;;;;;;;;;;;;:::i;4410:297::-;;;;;;;;;;;;;;;;-1:-1:-1;4410:297:18;-1:-1:-1;;;;;4410:297:18;;:::i;1557:137:0:-;;;:::i;14221:1764:18:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;14221:1764:18;;;;;;;;;;;;;;;;;;;;:::i;963:77:0:-;;;:::i;1123:90::-;;;:::i;11213:238:18:-;;;;;;;;;;;;;;;;-1:-1:-1;11213:238:18;-1:-1:-1;;;;;11213:238:18;;:::i;3094:96::-;;;:::i;13377:360::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13377:360:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13377:360:18;;;;;;;;;;-1:-1:-1;13377:360:18;;-1:-1:-1;13377:360:18;-1:-1:-1;13377:360:18;:::i;12124:150::-;;;;;;;;;;;;;;;;-1:-1:-1;12124:150:18;-1:-1:-1;;;;;12124:150:18;;:::i;4911:174::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4911:174:18;;;;;;;;:::i;1867:488::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1867:488:18;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1867:488:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1867:488:18;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1867:488:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1867:488:18;;;;;;;;;;;;-1:-1:-1;1867:488:18;-1:-1:-1;1867:488:18;-1:-1:-1;;;;;1867:488:18;;:::i;20109:148::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;20109:148:18;;;;;;;;:::i;16963:195::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;16963:195:18;;;;;;;;:::i;5143:157::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5143:157:18;;;;;;;;;;:::i;11515:342::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;11515:342:18;;;;;;;;:::i;1843:107:0:-;;;;;;;;;;;;;;;;-1:-1:-1;1843:107:0;-1:-1:-1;;;;;1843:107:0;;:::i;1746:44:18:-;;;:::i;2889:92::-;2969:5;2962:12;;;;;;;-1:-1:-1;;2962:12:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2937:13;;2962:12;;2969:5;;2962:12;;2969:5;2962:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2889:92;:::o;16052:471::-;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16265:57:::1;::::0;;16294:10:::1;16265:57:::0;;;;-1:-1:-1;;;;;16265:57:18;::::1;::::0;;;;;;;;;;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;;;;-1:-1:-1;;;16265:57:18;;;;;;;;;;;;;;;;;;;;;;;;16255:68;;;;::::1;::::0;;;;16333:26;;;::::1;::::0;;;;;;;;;;;16255:68;16333:26:::1;::::0;16255:68;;16350:8;;;;;;16333:26;;16350:8;;16333:26;16350:8;16333:26;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;16333:10:18::1;::::0;-1:-1:-1;;;16333:26:18:i:1;:::-;16466:50;::::0;;;;;;;-1:-1:-1;;;;;16466:50:18;::::1;::::0;16488:10:::1;::::0;16466:50:::1;::::0;;;;::::1;::::0;;::::1;21197:1;16052:471:::0;;;;;:::o;5438:176::-;5529:4;5549:37;5558:10;5570:7;5579:6;5549:8;:37::i;:::-;-1:-1:-1;5603:4:18;5438:176;;;;:::o;18073:100::-;18136:30;18147:10;18159:6;18136:10;:30::i;:::-;18073:100;:::o;12532:399::-;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12787:47:::1;::::0;;12742:10:::1;12787:47:::0;;;;;;;;;;;;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;;;;-1:-1:-1;;;12787:47:18;;;;;;;;;;;;;;;;;;;;;;;;12777:58;;;;::::1;::::0;;;;12845:22;;;::::1;::::0;;;;;;;;;;;12742:10;;12777:58;;12845:22:::1;::::0;12777:58;;12862:4;;;;;;12845:22;;;;12862:4;;12845:22;12862:4;12845:22;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;12845:10:18::1;::::0;-1:-1:-1;;;12845:22:18:i:1;:::-;12899:14;-1:-1:-1::0;;;;;12882:42:18::1;;12915:2;12919:4;;12882:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;-1:-1:-1::0;;12882:42:18::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;12882:42:18;;-1:-1:-1;;;;;12882:42:18::1;21197:1;;12532:399:::0;;;;:::o;19738:365::-;20934:5;;-1:-1:-1;;;;;20934:5:18;20944:10;20926:28;20918:71;;;;;-1:-1:-1;;;20918:71:18;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20918:71:18;;;;;;;;;;;;;;;19947:6:::1;-1:-1:-1::0;;;;;19936:17:18::1;:7;-1:-1:-1::0;;;;;19936:17:18::1;;19932:165;;;19969:37;19979:7;19988:9;19999:6;19969:9;:37::i;:::-;19932:165;;;20037:49;20051:7;20060:6;20068:9;20079:6;20037:13;:49::i;:::-;19738:365:::0;;;;:::o;4221:139::-;4312:16;;:41;;;-1:-1:-1;;;4312:41:18;;4347:4;4312:41;;;;;;4282:7;;-1:-1:-1;;;;;4312:16:18;;:26;;:41;;;;;;;;;;;;;;:16;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4312:41:18;;-1:-1:-1;4221:139:18;:::o;20604:102::-;20693:5;;-1:-1:-1;;;;;20693:5:18;20604:102;:::o;6074:206::-;6180:4;6200:52;6214:10;6226:6;6234:9;6245:6;6200:13;:52::i;:::-;-1:-1:-1;6269:4:18;6074:206;;;;;:::o;20263:152::-;20934:5;;-1:-1:-1;;;;;20934:5:18;20944:10;20926:28;20918:71;;;;;-1:-1:-1;;;20918:71:18;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20918:71:18;;;;;;;;;;;;;;;20381:27:::1;20392:7;20401:6;20381:10;:27::i;:::-;20263:152:::0;;:::o;13802:354::-;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14013:47:::1;::::0;;13968:10:::1;14013:47:::0;;;;;;;;;;;;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;;;;-1:-1:-1;;;14013:47:18;;;;;;;;;;;;;;;;;;;;;;;;;14003:58;;;;;::::1;::::0;14071:28:::1;14003:58:::0;14088:10;14071::::1;:28::i;:::-;14114:35;::::0;;;;;;;14134:10:::1;::::0;14114:35:::1;::::0;;;;;::::1;::::0;;::::1;21197:1;;13802:354:::0;;;:::o;11863:255::-;11988:23;12013:15;12030:19;12068:43;12086:7;12095:15;12068:17;:43::i;:::-;12061:50;;;;;;11863:255;;;;;:::o;3870:102::-;1788:2;3870:102;:::o;10876:272::-;11050:5;;;:21;;;-1:-1:-1;;;11050:21:18;;;;10990:16;;11022:25;;-1:-1:-1;;;;;11050:5:18;;:19;;:21;;;;;;;;;;;:5;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11050:21:18;-1:-1:-1;;;;;11107:33:18;;;;;;;:24;11050:21;11107:33;;;;;;11088:53;;-1:-1:-1;;;11088:53:18;;11106:34;;11088:53;;;;;;11050:21;;-1:-1:-1;11088:17:18;;;;;;:53;;;;;11107:33;11088:53;;;;;;:17;:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11088:53:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11088:53:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11088:53:18;;;;;;;;;;;;-1:-1:-1;11088:53:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11081:60;;;10876:272;;;:::o;17417:120::-;17513:16;;-1:-1:-1;;;;;17513:16:18;17417:120;:::o;17591:96::-;17652:28;17661:10;17673:6;17652:8;:28::i;2526:113::-;2437:9:0;:7;:9::i;:::-;2429:54;;;;;-1:-1:-1;;;2429:54:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2602:30:18::1;2621:10;2602:18;:30::i;16587:370::-:0;16840:61;;;-1:-1:-1;;;;;16840:61:18;;;;;;;;;16778:25;16840:61;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;16840:61:18;;;;;;;;;;;;;;;;;;;;;;;;;16830:72;;;;;;;16923:27;16830:72;16939:10;16923:9;:27::i;:::-;16912:38;16587:370;-1:-1:-1;;;;;;16587:370:18:o;306:120:24:-;355:19;392:27;:25;:27::i;:::-;385:34;;306:120;:::o;2361:159:18:-;2442:71;2361:159;:::o;19528:204::-;20934:5;;-1:-1:-1;;;;;20934:5:18;20944:10;20926:28;20918:71;;;;;-1:-1:-1;;;20918:71:18;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20918:71:18;;;;;;;;;;;;;;;19691:34:::1;19700:7;19709;19718:6;19691:8;:34::i;:::-;19528:204:::0;;;:::o;242:2074:20:-;2148:29;284:12;2230:79;;12994:317:18;13212:47;;;-1:-1:-1;;;;;13212:47:18;;;;;;13150:21;13212:47;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13212:47:18;;;;;;;;;;;;;;;;;;;;;;;;;13202:58;;;;;;;13277:27;13202:58;13293:10;13277:9;:27::i;:::-;13270:34;12994:317;-1:-1:-1;;;;;12994:317:18:o;4410:297::-;4521:15;4553:23;4584:47;4606:7;4615:15;4584:21;:47::i;:::-;4552:79;;;;4667:1;4648:16;:20;:52;;4683:16;4648:52;;;4671:1;4648:52;4641:59;4410:297;-1:-1:-1;;;4410:297:18:o;1557:137:0:-;2437:9;:7;:9::i;:::-;2429:54;;;;;-1:-1:-1;;;2429:54:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1655:1:::1;1639:6:::0;;1618:40:::1;::::0;-1:-1:-1;;;;;1639:6:0;;::::1;::::0;1618:40:::1;::::0;1655:1;;1618:40:::1;1685:1;1668:19:::0;;-1:-1:-1;;;;;;1668:19:0::1;::::0;;1557:137::o;14221:1764:18:-;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14420:25:::1;14448:5;;;;;;;;;-1:-1:-1::0;;;;;14448:5:18::1;-1:-1:-1::0;;;;;14448:19:18::1;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;14448:21:18;14503:35:::1;::::0;;-1:-1:-1;;;14503:35:18;;14532:4:::1;14503:35;::::0;::::1;::::0;;;14448:21;;-1:-1:-1;14479:21:18::1;::::0;-1:-1:-1;;;;;14503:20:18;::::1;::::0;::::1;::::0;:35;;;;;14448:21:::1;::::0;14503:35;;;;;;;:20;:35;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;14503:35:18;;-1:-1:-1;;;;;;14614:27:18;::::1;14610:84;;-1:-1:-1::0;14673:10:18;14610:84:::1;14705:23;14736:43;14754:7;14763:15;14736:17;:43::i;:::-;-1:-1:-1::0;14704:75:18;;-1:-1:-1;14790:13:18::1;::::0;-1:-1:-1;14806:37:18::1;14704:75:::0;14834:7;14806:20:::1;:37::i;:::-;14790:53;;14984:1;14975:6;:10;14971:1008;;;-1:-1:-1::0;;;;;15095:24:18;::::1;;::::0;;;:9:::1;:24;::::0;;;;;:45:::1;::::0;15131:7;15095:28:::1;:45::i;:::-;-1:-1:-1::0;;;;;15068:24:18;;::::1;;::::0;;;:9:::1;:24;::::0;;;;;:72;;;;15228:18;;::::1;::::0;;;;:39:::1;::::0;15258:7;15228:22:::1;:39::i;:::-;-1:-1:-1::0;;;;;15207:18:18;;::::1;;::::0;;;:9:::1;:18;::::0;;;;;;;;:60;;;;15286:68;;;;;;;::::1;::::0;;;;;;;::::1;::::0;15207:18;;15306:10:::1;::::0;15286:68:::1;::::0;;;;;;;::::1;14971:1008;;;-1:-1:-1::0;;;;;15471:21:18;::::1;;::::0;;;:9:::1;:21;::::0;;;;;:42:::1;::::0;15504:7;15471:25:::1;:42::i;:::-;-1:-1:-1::0;;;;;15447:21:18;;::::1;;::::0;;;:9:::1;:21;::::0;;;;;:66;;;;15643:18;;::::1;::::0;;;;:95:::1;::::0;15729:7;;15643:57:::1;::::0;15683:16;15643:39:::1;:57::i;:::-;:78:::0;::::1;:95::i;:::-;-1:-1:-1::0;;;;;15622:18:18;;::::1;;::::0;;;:9:::1;:18;::::0;;;;;:116;;;;15838:24;;::::1;::::0;;;;:46:::1;::::0;15867:16;15838:28:::1;:46::i;:::-;-1:-1:-1::0;;;;;15811:24:18;;::::1;;::::0;;;:9:::1;:24;::::0;;;;;;;;:73;;;;15903:65;;;;;;;::::1;::::0;;;;;;;::::1;::::0;;;::::1;::::0;15923:10:::1;::::0;15903:65:::1;::::0;;;;;;;::::1;14971:1008;21197:1;;;;14221:1764:::0;;;;;:::o;963:77:0:-;1001:7;1027:6;-1:-1:-1;;;;;1027:6:0;963:77;:::o;1123:90::-;1163:4;1200:6;-1:-1:-1;;;;;1200:6:0;1186:10;:20;;1123:90::o;11213:238:18:-;11333:4;11354:13;11374:43;11392:7;11401:15;11374:17;:43::i;:::-;-1:-1:-1;;11443:1:18;-1:-1:-1;;11213:238:18;-1:-1:-1;;;11213:238:18:o;3094:96::-;3176:7;3169:14;;;;;;;;-1:-1:-1;;3169:14:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3144:13;;3169:14;;3176:7;;3169:14;;3176:7;3169:14;;;;;;;;;;;;;;;;;;;;;;;;13377:360;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13597:47:::1;::::0;;13552:10:::1;13597:47:::0;;;;;;;;;;;;;::::1;::::0;;::::1;::::0;;;;::::1;::::0;;;;-1:-1:-1;;;13597:47:18;;;;;;;;;;;;;;;;;;;;;;;;13587:58;;;;::::1;::::0;;;;13655:22;;;::::1;::::0;;;;;;;;;;;13552:10;;13587:58;;13655:22:::1;::::0;13587:58;;13672:4;;;;;;13655:22;;;;13672:4;;13655:22;13672:4;13655:22;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;13655:10:18::1;::::0;-1:-1:-1;;;13655:22:18:i:1;:::-;13709:10;-1:-1:-1::0;;;;;13692:38:18::1;;13721:2;13725:4;;13692:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;-1:-1:-1::0;;13692:38:18::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;13692:38:18;;-1:-1:-1;;;;;13692:38:18::1;21197:1;;13377:360:::0;;;;:::o;12124:150::-;12212:55;12222:10;12234:9;12245:21;12255:10;12245:9;:21::i;:::-;12212:9;:55::i;4911:174::-;4997:4;5017:40;5027:10;5039:9;5050:6;5017:9;:40::i;1867:488::-;2087:12;;-1:-1:-1;;;2087:12:18;;;;2086:13;2078:45;;;;;-1:-1:-1;;;2078:45:18;;;;;;;;;;;;-1:-1:-1;;;2078:45:18;;;;;;;;;;;;;;;2133:12;:19;;-1:-1:-1;;;;;;;;;;2133:19:18;;;-1:-1:-1;;;2133:19:18;;;2162;;2171:10;2162:19;;;;2148:4;2192:34;;2133:19;2236:40;;;;;-1:-1:-1;;;;;2192:34:18;;;;;;;;;;2236:40;;;;;;2287:12;:5;2295:4;;2287:12;:::i;:::-;-1:-1:-1;2309:16:18;:7;2319:6;;2309:16;:::i;:::-;-1:-1:-1;2336:5:18;:12;;-1:-1:-1;;;;;;2336:12:18;-1:-1:-1;;;;;2336:12:18;;;;;;;;;;-1:-1:-1;;;;;;1867:488:18:o;20109:148::-;20934:5;;-1:-1:-1;;;;;20934:5:18;20944:10;20926:28;20918:71;;;;;-1:-1:-1;;;20918:71:18;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20918:71:18;;;;;;;;;;;;;;;20225:25:::1;20234:7;20243:6;20225:8;:25::i;16963:195::-:0;21048:25;21076:5;;;;;;;;;-1:-1:-1;;;;;21076:5:18;-1:-1:-1;;;;;21076:19:18;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21076:21:18;21115:33;;;-1:-1:-1;;;21115:33:18;;21137:10;21115:33;;;;;;21076:21;;-1:-1:-1;;;;;;21115:21:18;;;;;:33;;;;;21076:21;;21115:33;;;;;;;;:21;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21115:33:18;21107:80;;;;-1:-1:-1;;;21107:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;17122:18:18;::::1;;::::0;;;:9:::1;:18;::::0;;;;;:29:::1;::::0;17145:5;17122:22:::1;:29::i;:::-;-1:-1:-1::0;;;;;17101:18:18;;::::1;;::::0;;;:9:::1;:18;::::0;;;;:50;;;;-1:-1:-1;;16963:195:18:o;5143:157::-;-1:-1:-1;;;;;5264:20:18;;;5234:7;5264:20;;;:11;:20;;;;;;;;:29;;;;;;;;;;;;;5143:157::o;11515:342::-;11662:23;11687:15;11704:19;11809:41;11831:7;11840:9;11809:21;:41::i;:::-;11739:111;;;;-1:-1:-1;11739:111:18;;-1:-1:-1;11515:342:18;-1:-1:-1;;;11515:342:18:o;1843:107:0:-;2437:9;:7;:9::i;:::-;2429:54;;;;;-1:-1:-1;;;2429:54:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1915:28:::1;1934:8;1915:18;:28::i;1746:44:18:-:0;1788:2;1746:44;:::o;21409:213::-;21489:6;21484:132;21505:4;:11;21501:1;:15;21484:132;;;21537:9;21549:4;21554:1;21549:7;;;;;;;;;;;;;;;;;;21588:12;;;21581:23;-1:-1:-1;21518:3:18;;21484:132;;10287:329;-1:-1:-1;;;;;10393:21:18;;10385:59;;;;;-1:-1:-1;;;10385:59:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10462:21:18;;10454:57;;;;;-1:-1:-1;;;10454:57:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10522:20:18;;;;;;;:11;:20;;;;;;;;:29;;;;;;;;;;;;;:38;;;10575:34;;;;;;;;;;;;;;;;;10287:329;;;:::o;18179:413::-;18289:6;18266:18;18276:7;18266:9;:18::i;:::-;18258:37;;18250:94;;;;-1:-1:-1;;;18250:94:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18354:24;18417:27;18437:6;18417:19;:27::i;:::-;18388:56;-1:-1:-1;18388:56:18;-1:-1:-1;18454:22:18;18460:7;18388:56;18454:5;:22::i;:::-;18486:16;;:52;;;-1:-1:-1;;;18486:52:18;;-1:-1:-1;;;;;18486:52:18;;;;;;;;;;;;;;;:16;;;;;:25;;:52;;;;;;;;;;;;;;:16;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18553:32:18;;;;;;;;-1:-1:-1;;;;;18553:32:18;;;;;;;;;18486:52;18553:32;;;18179:413;;;:::o;8301:439::-;-1:-1:-1;;;;;8409:23:18;;8401:60;;;;;-1:-1:-1;;;8401:60:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;8500:6;8479:17;8489:6;8479:9;:17::i;:::-;:27;;8471:71;;;;;-1:-1:-1;;;8471:71:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8573:17:18;;;;;;:9;:17;;;;;;:37;;8602:6;8573:21;:37::i;:::-;-1:-1:-1;;;;;8553:17:18;;;;;;;:9;:17;;;;;;:57;;;;8643:20;;;;;;;:40;;8675:6;8643:24;:40::i;:::-;-1:-1:-1;;;;;8620:20:18;;;;;;;:9;:20;;;;;;;;;:63;;;;8698:35;;;;;;;8620:20;;8698:35;;;;;;;;;;;;;8301:439;;;:::o;6286:328::-;6404:36;6414:6;6422:9;6433:6;6404:9;:36::i;:::-;6450:157;6472:6;6492:7;6513:84;6546:6;6513:84;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6513:19:18;;;;;;;:11;:19;;;;;;;;:28;;;;;;;;;;;:84;:32;:84::i;:::-;6450:8;:157::i;21934:173::-;22008:6;22003:98;22024:10;22020:1;:14;22003:98;;;22087:1;22073:12;;;22066:23;22036:3;;22003:98;;17693:324;17762:24;17825:27;17845:6;17825:19;:27::i;:::-;17862:16;;:71;;;-1:-1:-1;;;17862:71:18;;-1:-1:-1;;;;;17862:71:18;;;;;;;17909:4;17862:71;;;;;;;;;;;;17796:56;;-1:-1:-1;17796:56:18;;-1:-1:-1;17862:16:18;;:29;;:71;;;;;;;;;;;;;;:16;;:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17943:22:18;;-1:-1:-1;17949:7:18;17958:6;17943:5;:22::i;:::-;17980:30;;;;;;;;-1:-1:-1;;;;;17980:30:18;;;;;;;;;;;;;17693:324;;;:::o;793:252:24:-;910:10;-1:-1:-1;;;;;900:35:24;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;900:37:24;881:15;:13;:15::i;:::-;:56;860:128;;;;;-1:-1:-1;;;860:128:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;998:40;1027:10;998:28;:40::i;21628:300:18:-;21700:21;21754:10;21740:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21740:25:18;;21733:32;;21780:6;21775:147;21796:10;21792:1;:14;21775:147;;;21827:9;21882:1;21876:4;21872:12;21866:19;21861:24;;21910:1;21900:4;21905:1;21900:7;;;;;;;;;;;;;;;;;:11;-1:-1:-1;21808:3:18;;21775:147;;;;21628:300;;;;:::o;737:170:26:-;870:20;864:27;;819:82::o;6695:1132:18:-;-1:-1:-1;;;;;6923:18:18;;6821:23;6923:18;;;:9;:18;;;;;;6821:23;;;;6951:33;6987:35;6933:7;6987:26;:35::i;:::-;6951:71;;7037:9;7032:612;7056:16;:23;7052:1;:27;7032:612;;;7118:30;7166:24;7208:28;7256:16;7273:1;7256:19;;;;;;;;;;;;;;-1:-1:-1;;;;;7240:75:18;;7342:4;7373:7;7407:9;7240:199;;;;;;;;;;;;;-1:-1:-1;;;;;7240:199:18;;;;;;-1:-1:-1;;;;;7240:199:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7240:199:18;;;;;;;;;;;;;-1:-1:-1;7240:199:18;;-1:-1:-1;7240:199:18;-1:-1:-1;7471:44:18;:15;7240:199;7471:19;:44::i;:::-;7453:62;-1:-1:-1;7539:29:18;:7;7551:16;7539:11;:29::i;:::-;7529:39;-1:-1:-1;7596:37:18;:11;7612:20;7596:15;:37::i;:::-;7582:51;-1:-1:-1;;7081:3:18;;;;;-1:-1:-1;7032:612:18;;-1:-1:-1;7032:612:18;;;7718:102;7792:26;7797:7;7806:11;7792:4;:26::i;:::-;7718:49;:15;7758:7;7718:32;:49::i;:::-;:66;;:102::i;:::-;7699:121;;6695:1132;;;;;;;:::o;2446:210:30:-;2502:6;2531:5;;;2555:6;;;;;;:16;;;2570:1;2565;:6;;2555:16;2554:38;;;;2581:1;2577;:5;:14;;;;;2590:1;2586;:5;2577:14;2546:84;;;;-1:-1:-1;;;2546:84:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2000:213;2056:6;2085:5;;;2109:6;;;;;;:16;;;2124:1;2119;:6;;2109:16;2108:38;;;;2135:1;2131;:5;:14;;;;;2144:1;2140;:5;2131:14;2100:87;;;;-1:-1:-1;;;2100:87:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2051:259:0;-1:-1:-1;;;;;2137:22:0;;2116:107;;;;-1:-1:-1;;;2116:107:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2259:6;;;2238:38;;-1:-1:-1;;;;;2238:38:0;;;;2259:6;;;2238:38;;;2286:6;:17;;-1:-1:-1;;;;;;2286:17:0;-1:-1:-1;;;;;2286:17:0;;;;;;;;;;2051:259::o;18598:728:18:-;18771:19;;18681:24;;;;;;1788:2;-1:-1:-1;;;18771:19:18;;;:39;:19;:39;18767:553;;;-1:-1:-1;18862:19:18;;;-1:-1:-1;;;18862:19:18;;;;;1788:2;18842:39;18835:47;:2;:47;;18915:6;18835:47;18915:15;;;;;18896:34;;19017:6;18998:16;:25;18983:40;;18767:553;;;19044:19;;1788:2;-1:-1:-1;;;19044:19:18;;;:39;:19;:39;19040:280;;;-1:-1:-1;;19115:19:18;;-1:-1:-1;;19115:19:18;-1:-1:-1;;;19115:19:18;;;;;:39;19108:47;:2;:47;19188:15;;;;-1:-1:-1;19188:6:18;;19040:280;;;19303:6;19288:21;;;19269:40;;19040:280;18598:728;;;;:::o;9591:264::-;-1:-1:-1;;;;;9678:21:18;;9670:56;;;;;-1:-1:-1;;;9670:56:18;;;;;;;;;;;;-1:-1:-1;;;9670:56:18;;;;;;;;;;;;;;;-1:-1:-1;;;;;9758:18:18;;;;;;:9;:18;;;;;;:38;;9788:6;9758:22;:38::i;:::-;-1:-1:-1;;;;;9737:18:18;;;;;;:9;:18;;;;;;;;:59;;;;9811:37;;;;;;;9737:18;;9811:37;;;;;;;;;;;9591:264;;:::o;1746:187:29:-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:29;;;1746:187::o;9010:262:18:-;-1:-1:-1;;;;;9097:21:18;;9089:54;;;;;-1:-1:-1;;;9089:54:18;;;;;;;;;;;;-1:-1:-1;;;9089:54:18;;;;;;;;;;;;;;;-1:-1:-1;;;;;9175:18:18;;;;;;:9;:18;;;;;;:38;;9205:6;9175:22;:38::i;:::-;-1:-1:-1;;;;;9154:18:18;;;;;;:9;:18;;;;;;;;:59;;;;9228:37;;;;;;;9154:18;;;;9228:37;;;;;;;;;;9010:262;;:::o;958:228:26:-;1107:20;1083:87;1034:146::o;874:176:29:-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:29;;;;;;;;;;;;;;;;;;;;;;;;;;;22113:105:18;22172:7;22202:1;22198;:5;:13;;22210:1;22198:13;;;-1:-1:-1;22206:1:18;;22191:20;-1:-1:-1;22113:105:18:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;",
  "sourcePath": "/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/test/SuperTokenStorageTester.sol",
  "ast": {
    "absolutePath": "/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/test/SuperTokenStorageTester.sol",
    "exportedSymbols": {
      "SuperTokenStorageTester": [
        11353
      ]
    },
    "id": 11354,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11217,
        "literals": [
          "solidity",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "54:22:20"
      },
      {
        "absolutePath": "/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/superfluid/SuperToken.sol",
        "file": "../superfluid/SuperToken.sol",
        "id": 11219,
        "nodeType": "ImportDirective",
        "scope": 11354,
        "sourceUnit": 9501,
        "src": "78:56:20",
        "symbolAliases": [
          {
            "foreign": {
              "id": 11218,
              "name": "SuperToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "86:10:20",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 11221,
              "name": "SuperToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9500,
              "src": "225:10:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SuperToken_$9500",
                "typeString": "contract SuperToken"
              }
            },
            "id": 11222,
            "nodeType": "InheritanceSpecifier",
            "src": "225:10:20"
          }
        ],
        "contractDependencies": [
          105,
          7513,
          7897,
          7919,
          7972,
          9500,
          11732,
          12890
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 11220,
          "nodeType": "StructuredDocumentation",
          "src": "136:52:20",
          "text": " @dev Test SuperTokenStorag Layout changes"
        },
        "fullyImplemented": true,
        "id": 11353,
        "linearizedBaseContracts": [
          11353,
          9500,
          11732,
          7513,
          7897,
          7919,
          12890,
          7972,
          105
        ],
        "name": "SuperTokenStorageTester",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11351,
              "nodeType": "Block",
              "src": "274:2042:20",
              "statements": [
                {
                  "assignments": [
                    11226
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11226,
                      "mutability": "mutable",
                      "name": "slot",
                      "nodeType": "VariableDeclaration",
                      "scope": 11351,
                      "src": "284:12:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 11225,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "284:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11227,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "284:12:20"
                },
                {
                  "assignments": [
                    11229
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11229,
                      "mutability": "mutable",
                      "name": "offset",
                      "nodeType": "VariableDeclaration",
                      "scope": 11351,
                      "src": "306:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 11228,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "306:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11230,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "306:14:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "374:46:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "376:18:20",
                        "value": {
                          "name": "_owner.slot",
                          "nodeType": "YulIdentifier",
                          "src": "383:11:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "376:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "395:23:20",
                        "value": {
                          "name": "_owner.offset",
                          "nodeType": "YulIdentifier",
                          "src": "405:13:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "395:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 5,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "405:13:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 5,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "383:11:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "395:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "376:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11231,
                  "nodeType": "InlineAssembly",
                  "src": "365:55:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11235,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11233,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "438:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11234,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "446:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "438:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11236,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "451:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11237,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "461:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "451:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "438:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6f776e6572206368616e676564206c6f636174696f6e",
                        "id": 11240,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "464:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_533d2301823d580cb546c9d1ac477da7778d7dd5191701878f391e5354c5456f",
                          "typeString": "literal_string \"_owner changed location\""
                        },
                        "value": "_owner changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_533d2301823d580cb546c9d1ac477da7778d7dd5191701878f391e5354c5456f",
                          "typeString": "literal_string \"_owner changed location\""
                        }
                      ],
                      "id": 11232,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "429:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11241,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "429:61:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11242,
                  "nodeType": "ExpressionStatement",
                  "src": "429:61:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "546:58:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "548:24:20",
                        "value": {
                          "name": "_initialized.slot",
                          "nodeType": "YulIdentifier",
                          "src": "555:17:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "548:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "573:29:20",
                        "value": {
                          "name": "_initialized.offset",
                          "nodeType": "YulIdentifier",
                          "src": "583:19:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "573:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7939,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "583:19:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7939,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "555:17:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "573:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "548:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11243,
                  "nodeType": "InlineAssembly",
                  "src": "537:67:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11245,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "622:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11246,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "630:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "622:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11248,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "635:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 11249,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "645:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "635:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "622:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "696e697469616c697a6564206368616e676564206c6f636174696f6e",
                        "id": 11252,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "649:30:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4ececdac160e46e5a724c4cfe05e5fac7782a85f83712166f87df5dd59d455b4",
                          "typeString": "literal_string \"initialized changed location\""
                        },
                        "value": "initialized changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4ececdac160e46e5a724c4cfe05e5fac7782a85f83712166f87df5dd59d455b4",
                          "typeString": "literal_string \"initialized changed location\""
                        }
                      ],
                      "id": 11244,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "613:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "613:67:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11254,
                  "nodeType": "ExpressionStatement",
                  "src": "613:67:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "735:66:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "737:28:20",
                        "value": {
                          "name": "_underlyingToken.slot",
                          "nodeType": "YulIdentifier",
                          "src": "744:21:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "737:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "766:33:20",
                        "value": {
                          "name": "_underlyingToken.offset",
                          "nodeType": "YulIdentifier",
                          "src": "776:23:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "766:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7942,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "776:23:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7942,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "744:21:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "766:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "737:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11255,
                  "nodeType": "InlineAssembly",
                  "src": "726:75:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11263,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11257,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "819:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 11258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "827:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "819:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11260,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "832:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "842:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "832:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "819:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f756e6465726c79696e67546f6b656e206368616e676564206c6f636174696f6e",
                        "id": 11264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "845:35:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_99503a22a171f448f91bb877882e7d8fc86402434814155d20cf48023edd1943",
                          "typeString": "literal_string \"_underlyingToken changed location\""
                        },
                        "value": "_underlyingToken changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_99503a22a171f448f91bb877882e7d8fc86402434814155d20cf48023edd1943",
                          "typeString": "literal_string \"_underlyingToken changed location\""
                        }
                      ],
                      "id": 11256,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "810:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "810:71:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11266,
                  "nodeType": "ExpressionStatement",
                  "src": "810:71:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "938:72:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "940:31:20",
                        "value": {
                          "name": "_underlyingDecimals.slot",
                          "nodeType": "YulIdentifier",
                          "src": "947:24:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "940:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "972:36:20",
                        "value": {
                          "name": "_underlyingDecimals.offset",
                          "nodeType": "YulIdentifier",
                          "src": "982:26:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "972:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7945,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "982:26:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7945,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "947:24:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "972:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "940:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11267,
                  "nodeType": "InlineAssembly",
                  "src": "929:81:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11269,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1028:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 11270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1036:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "1028:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11272,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1041:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 11273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1051:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "1041:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1028:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f756e6465726c79696e67446563696d616c73206368616e676564206c6f636174696f6e",
                        "id": 11276,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1055:38:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a8c9362096c9f671467b916f4d18476925a10d34b9555f911726cf2d2dd8e73",
                          "typeString": "literal_string \"_underlyingDecimals changed location\""
                        },
                        "value": "_underlyingDecimals changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a8c9362096c9f671467b916f4d18476925a10d34b9555f911726cf2d2dd8e73",
                          "typeString": "literal_string \"_underlyingDecimals changed location\""
                        }
                      ],
                      "id": 11268,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1019:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1019:75:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11278,
                  "nodeType": "ExpressionStatement",
                  "src": "1019:75:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1148:44:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1150:17:20",
                        "value": {
                          "name": "_name.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1157:10:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1150:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1168:22:20",
                        "value": {
                          "name": "_name.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1178:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1168:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7948,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1178:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7948,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1157:10:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1168:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1150:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11279,
                  "nodeType": "InlineAssembly",
                  "src": "1139:53:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11281,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1210:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "32",
                            "id": 11282,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1218:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "1210:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11284,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1223:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11285,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1233:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1223:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1210:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6e616d65206368616e676564206c6f636174696f6e",
                        "id": 11288,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1236:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c2fb97fc9f3ee019f8b311277207dceb183d57b43b1d1a94bc5d32af14f6fa90",
                          "typeString": "literal_string \"_name changed location\""
                        },
                        "value": "_name changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c2fb97fc9f3ee019f8b311277207dceb183d57b43b1d1a94bc5d32af14f6fa90",
                          "typeString": "literal_string \"_name changed location\""
                        }
                      ],
                      "id": 11280,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1201:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1201:60:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11290,
                  "nodeType": "ExpressionStatement",
                  "src": "1201:60:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1317:48:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1319:19:20",
                        "value": {
                          "name": "_symbol.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1326:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1319:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1339:24:20",
                        "value": {
                          "name": "_symbol.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1349:14:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1339:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7951,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1349:14:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7951,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1326:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1339:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1319:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11291,
                  "nodeType": "InlineAssembly",
                  "src": "1308:57:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11293,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1383:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "33",
                            "id": 11294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1391:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1383:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11296,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1396:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1406:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1396:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1383:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f73796d626f6c206368616e676564206c6f636174696f6e",
                        "id": 11300,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1409:26:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ecaa5d78ea2eb27f9a5edc024acf44fd9a80abbd0fdce92ad30fd37dcbf4f4b4",
                          "typeString": "literal_string \"_symbol changed location\""
                        },
                        "value": "_symbol changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ecaa5d78ea2eb27f9a5edc024acf44fd9a80abbd0fdce92ad30fd37dcbf4f4b4",
                          "typeString": "literal_string \"_symbol changed location\""
                        }
                      ],
                      "id": 11292,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1374:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11301,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1374:62:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11302,
                  "nodeType": "ExpressionStatement",
                  "src": "1374:62:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1494:44:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1496:17:20",
                        "value": {
                          "name": "_host.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1503:10:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1496:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1514:22:20",
                        "value": {
                          "name": "_host.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1524:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1514:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7954,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1524:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7954,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1503:10:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1514:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1496:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11303,
                  "nodeType": "InlineAssembly",
                  "src": "1485:53:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11311,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11307,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11305,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1556:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "34",
                            "id": 11306,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1564:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "src": "1556:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11308,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1569:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1579:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1569:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1556:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f686f7374206368616e676564206c6f636174696f6e",
                        "id": 11312,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1582:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a1e6e306025a808710f222765a2168400057660aa5499b39d2e9a93e4e8e90f1",
                          "typeString": "literal_string \"_host changed location\""
                        },
                        "value": "_host changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a1e6e306025a808710f222765a2168400057660aa5499b39d2e9a93e4e8e90f1",
                          "typeString": "literal_string \"_host changed location\""
                        }
                      ],
                      "id": 11304,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1547:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1547:60:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11314,
                  "nodeType": "ExpressionStatement",
                  "src": "1547:60:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1685:52:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1687:21:20",
                        "value": {
                          "name": "_balances.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1694:14:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1687:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1709:26:20",
                        "value": {
                          "name": "_balances.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1719:16:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1709:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7959,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1719:16:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7959,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1694:14:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1709:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1687:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11315,
                  "nodeType": "InlineAssembly",
                  "src": "1676:61:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11323,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11319,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11317,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1755:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "35",
                            "id": 11318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1763:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "src": "1755:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11320,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1768:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1778:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1768:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1755:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f62616c616e636573206368616e676564206c6f636174696f6e",
                        "id": 11324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1781:28:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_351c0c64416285a0d8f51f4ab7b97bae516b75137d035631fca76ae99b8bf597",
                          "typeString": "literal_string \"_balances changed location\""
                        },
                        "value": "_balances changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_351c0c64416285a0d8f51f4ab7b97bae516b75137d035631fca76ae99b8bf597",
                          "typeString": "literal_string \"_balances changed location\""
                        }
                      ],
                      "id": 11316,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1746:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11325,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1746:64:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11326,
                  "nodeType": "ExpressionStatement",
                  "src": "1746:64:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1913:56:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1915:23:20",
                        "value": {
                          "name": "_allowances.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1922:16:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1915:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1939:28:20",
                        "value": {
                          "name": "_allowances.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1949:18:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1939:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7966,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1949:18:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7966,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1922:16:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1939:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1915:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11327,
                  "nodeType": "InlineAssembly",
                  "src": "1904:65:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11329,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1987:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "36",
                            "id": 11330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1995:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_6_by_1",
                              "typeString": "int_const 6"
                            },
                            "value": "6"
                          },
                          "src": "1987:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11332,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "2000:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2010:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2000:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1987:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f616c6c6f77616e636573206368616e676564206c6f636174696f6e",
                        "id": 11336,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2013:30:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_98da9330bc9672045a33c01921a2e344d60dd07ca326c86e4d212a9b69405049",
                          "typeString": "literal_string \"_allowances changed location\""
                        },
                        "value": "_allowances changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_98da9330bc9672045a33c01921a2e344d60dd07ca326c86e4d212a9b69405049",
                          "typeString": "literal_string \"_allowances changed location\""
                        }
                      ],
                      "id": 11328,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1978:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1978:66:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11338,
                  "nodeType": "ExpressionStatement",
                  "src": "1978:66:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "2139:82:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "2141:36:20",
                        "value": {
                          "name": "_inactiveAgreementBitmap.slot",
                          "nodeType": "YulIdentifier",
                          "src": "2148:29:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "2141:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "2178:41:20",
                        "value": {
                          "name": "_inactiveAgreementBitmap.offset",
                          "nodeType": "YulIdentifier",
                          "src": "2188:31:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2178:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7971,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "2188:31:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7971,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "2148:29:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2178:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2141:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11339,
                  "nodeType": "InlineAssembly",
                  "src": "2130:91:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11341,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "2239:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "37",
                            "id": 11342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2247:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_7_by_1",
                              "typeString": "int_const 7"
                            },
                            "value": "7"
                          },
                          "src": "2239:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11344,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "2252:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11345,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2262:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2252:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2239:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f696e61637469766541677265656d656e744269746d6170206368616e676564206c6f636174696f6e",
                        "id": 11348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2265:43:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_289bdaaefaa57a189cc9aacece46ff446b744d55829cb4fe6a9a5891c9adc6d9",
                          "typeString": "literal_string \"_inactiveAgreementBitmap changed location\""
                        },
                        "value": "_inactiveAgreementBitmap changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_289bdaaefaa57a189cc9aacece46ff446b744d55829cb4fe6a9a5891c9adc6d9",
                          "typeString": "literal_string \"_inactiveAgreementBitmap changed location\""
                        }
                      ],
                      "id": 11340,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2230:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2230:79:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11350,
                  "nodeType": "ExpressionStatement",
                  "src": "2230:79:20"
                }
              ]
            },
            "functionSelector": "6901f668",
            "id": 11352,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "259:2:20"
            },
            "returnParameters": {
              "id": 11224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "274:0:20"
            },
            "scope": 11353,
            "src": "242:2074:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 11354,
        "src": "189:2129:20"
      }
    ],
    "src": "54:2265:20"
  },
  "legacyAST": {
    "absolutePath": "/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/test/SuperTokenStorageTester.sol",
    "exportedSymbols": {
      "SuperTokenStorageTester": [
        11353
      ]
    },
    "id": 11354,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11217,
        "literals": [
          "solidity",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "54:22:20"
      },
      {
        "absolutePath": "/home/hellwolf/Projects/superfluid/ethereum-contracts/contracts/superfluid/SuperToken.sol",
        "file": "../superfluid/SuperToken.sol",
        "id": 11219,
        "nodeType": "ImportDirective",
        "scope": 11354,
        "sourceUnit": 9501,
        "src": "78:56:20",
        "symbolAliases": [
          {
            "foreign": {
              "id": 11218,
              "name": "SuperToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "86:10:20",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 11221,
              "name": "SuperToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9500,
              "src": "225:10:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SuperToken_$9500",
                "typeString": "contract SuperToken"
              }
            },
            "id": 11222,
            "nodeType": "InheritanceSpecifier",
            "src": "225:10:20"
          }
        ],
        "contractDependencies": [
          105,
          7513,
          7897,
          7919,
          7972,
          9500,
          11732,
          12890
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 11220,
          "nodeType": "StructuredDocumentation",
          "src": "136:52:20",
          "text": " @dev Test SuperTokenStorag Layout changes"
        },
        "fullyImplemented": true,
        "id": 11353,
        "linearizedBaseContracts": [
          11353,
          9500,
          11732,
          7513,
          7897,
          7919,
          12890,
          7972,
          105
        ],
        "name": "SuperTokenStorageTester",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11351,
              "nodeType": "Block",
              "src": "274:2042:20",
              "statements": [
                {
                  "assignments": [
                    11226
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11226,
                      "mutability": "mutable",
                      "name": "slot",
                      "nodeType": "VariableDeclaration",
                      "scope": 11351,
                      "src": "284:12:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 11225,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "284:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11227,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "284:12:20"
                },
                {
                  "assignments": [
                    11229
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 11229,
                      "mutability": "mutable",
                      "name": "offset",
                      "nodeType": "VariableDeclaration",
                      "scope": 11351,
                      "src": "306:14:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 11228,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "306:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 11230,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "306:14:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "374:46:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "376:18:20",
                        "value": {
                          "name": "_owner.slot",
                          "nodeType": "YulIdentifier",
                          "src": "383:11:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "376:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "395:23:20",
                        "value": {
                          "name": "_owner.offset",
                          "nodeType": "YulIdentifier",
                          "src": "405:13:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "395:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 5,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "405:13:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 5,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "383:11:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "395:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "376:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11231,
                  "nodeType": "InlineAssembly",
                  "src": "365:55:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11235,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11233,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "438:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11234,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "446:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "438:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11236,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "451:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11237,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "461:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "451:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "438:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6f776e6572206368616e676564206c6f636174696f6e",
                        "id": 11240,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "464:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_533d2301823d580cb546c9d1ac477da7778d7dd5191701878f391e5354c5456f",
                          "typeString": "literal_string \"_owner changed location\""
                        },
                        "value": "_owner changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_533d2301823d580cb546c9d1ac477da7778d7dd5191701878f391e5354c5456f",
                          "typeString": "literal_string \"_owner changed location\""
                        }
                      ],
                      "id": 11232,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "429:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11241,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "429:61:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11242,
                  "nodeType": "ExpressionStatement",
                  "src": "429:61:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "546:58:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "548:24:20",
                        "value": {
                          "name": "_initialized.slot",
                          "nodeType": "YulIdentifier",
                          "src": "555:17:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "548:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "573:29:20",
                        "value": {
                          "name": "_initialized.offset",
                          "nodeType": "YulIdentifier",
                          "src": "583:19:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "573:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7939,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "583:19:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7939,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "555:17:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "573:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "548:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11243,
                  "nodeType": "InlineAssembly",
                  "src": "537:67:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11247,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11245,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "622:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11246,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "630:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "622:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11248,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "635:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 11249,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "645:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "635:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "622:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "696e697469616c697a6564206368616e676564206c6f636174696f6e",
                        "id": 11252,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "649:30:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4ececdac160e46e5a724c4cfe05e5fac7782a85f83712166f87df5dd59d455b4",
                          "typeString": "literal_string \"initialized changed location\""
                        },
                        "value": "initialized changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4ececdac160e46e5a724c4cfe05e5fac7782a85f83712166f87df5dd59d455b4",
                          "typeString": "literal_string \"initialized changed location\""
                        }
                      ],
                      "id": 11244,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "613:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "613:67:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11254,
                  "nodeType": "ExpressionStatement",
                  "src": "613:67:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "735:66:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "737:28:20",
                        "value": {
                          "name": "_underlyingToken.slot",
                          "nodeType": "YulIdentifier",
                          "src": "744:21:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "737:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "766:33:20",
                        "value": {
                          "name": "_underlyingToken.offset",
                          "nodeType": "YulIdentifier",
                          "src": "776:23:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "766:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7942,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "776:23:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7942,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "744:21:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "766:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "737:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11255,
                  "nodeType": "InlineAssembly",
                  "src": "726:75:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11263,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11257,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "819:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 11258,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "827:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "819:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11260,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "832:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "842:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "832:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "819:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f756e6465726c79696e67546f6b656e206368616e676564206c6f636174696f6e",
                        "id": 11264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "845:35:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_99503a22a171f448f91bb877882e7d8fc86402434814155d20cf48023edd1943",
                          "typeString": "literal_string \"_underlyingToken changed location\""
                        },
                        "value": "_underlyingToken changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_99503a22a171f448f91bb877882e7d8fc86402434814155d20cf48023edd1943",
                          "typeString": "literal_string \"_underlyingToken changed location\""
                        }
                      ],
                      "id": 11256,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "810:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "810:71:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11266,
                  "nodeType": "ExpressionStatement",
                  "src": "810:71:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "938:72:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "940:31:20",
                        "value": {
                          "name": "_underlyingDecimals.slot",
                          "nodeType": "YulIdentifier",
                          "src": "947:24:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "940:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "972:36:20",
                        "value": {
                          "name": "_underlyingDecimals.offset",
                          "nodeType": "YulIdentifier",
                          "src": "982:26:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "972:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7945,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "982:26:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7945,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "947:24:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "972:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "940:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11267,
                  "nodeType": "InlineAssembly",
                  "src": "929:81:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11269,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1028:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 11270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1036:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "1028:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11272,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1041:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 11273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1051:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "1041:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1028:25:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f756e6465726c79696e67446563696d616c73206368616e676564206c6f636174696f6e",
                        "id": 11276,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1055:38:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3a8c9362096c9f671467b916f4d18476925a10d34b9555f911726cf2d2dd8e73",
                          "typeString": "literal_string \"_underlyingDecimals changed location\""
                        },
                        "value": "_underlyingDecimals changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3a8c9362096c9f671467b916f4d18476925a10d34b9555f911726cf2d2dd8e73",
                          "typeString": "literal_string \"_underlyingDecimals changed location\""
                        }
                      ],
                      "id": 11268,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1019:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1019:75:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11278,
                  "nodeType": "ExpressionStatement",
                  "src": "1019:75:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1148:44:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1150:17:20",
                        "value": {
                          "name": "_name.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1157:10:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1150:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1168:22:20",
                        "value": {
                          "name": "_name.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1178:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1168:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7948,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1178:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7948,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1157:10:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1168:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1150:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11279,
                  "nodeType": "InlineAssembly",
                  "src": "1139:53:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11281,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1210:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "32",
                            "id": 11282,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1218:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "1210:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11284,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1223:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11285,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1233:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1223:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1210:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6e616d65206368616e676564206c6f636174696f6e",
                        "id": 11288,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1236:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c2fb97fc9f3ee019f8b311277207dceb183d57b43b1d1a94bc5d32af14f6fa90",
                          "typeString": "literal_string \"_name changed location\""
                        },
                        "value": "_name changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c2fb97fc9f3ee019f8b311277207dceb183d57b43b1d1a94bc5d32af14f6fa90",
                          "typeString": "literal_string \"_name changed location\""
                        }
                      ],
                      "id": 11280,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1201:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1201:60:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11290,
                  "nodeType": "ExpressionStatement",
                  "src": "1201:60:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1317:48:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1319:19:20",
                        "value": {
                          "name": "_symbol.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1326:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1319:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1339:24:20",
                        "value": {
                          "name": "_symbol.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1349:14:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1339:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7951,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1349:14:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7951,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1326:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1339:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1319:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11291,
                  "nodeType": "InlineAssembly",
                  "src": "1308:57:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11293,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1383:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "33",
                            "id": 11294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1391:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "1383:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11296,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1396:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11297,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1406:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1396:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1383:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f73796d626f6c206368616e676564206c6f636174696f6e",
                        "id": 11300,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1409:26:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ecaa5d78ea2eb27f9a5edc024acf44fd9a80abbd0fdce92ad30fd37dcbf4f4b4",
                          "typeString": "literal_string \"_symbol changed location\""
                        },
                        "value": "_symbol changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ecaa5d78ea2eb27f9a5edc024acf44fd9a80abbd0fdce92ad30fd37dcbf4f4b4",
                          "typeString": "literal_string \"_symbol changed location\""
                        }
                      ],
                      "id": 11292,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1374:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11301,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1374:62:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11302,
                  "nodeType": "ExpressionStatement",
                  "src": "1374:62:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1494:44:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1496:17:20",
                        "value": {
                          "name": "_host.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1503:10:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1496:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1514:22:20",
                        "value": {
                          "name": "_host.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1524:12:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1514:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7954,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1524:12:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7954,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1503:10:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1514:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1496:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11303,
                  "nodeType": "InlineAssembly",
                  "src": "1485:53:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11311,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11307,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11305,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1556:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "34",
                            "id": 11306,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1564:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_4_by_1",
                              "typeString": "int_const 4"
                            },
                            "value": "4"
                          },
                          "src": "1556:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11308,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1569:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1579:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1569:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1556:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f686f7374206368616e676564206c6f636174696f6e",
                        "id": 11312,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1582:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a1e6e306025a808710f222765a2168400057660aa5499b39d2e9a93e4e8e90f1",
                          "typeString": "literal_string \"_host changed location\""
                        },
                        "value": "_host changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a1e6e306025a808710f222765a2168400057660aa5499b39d2e9a93e4e8e90f1",
                          "typeString": "literal_string \"_host changed location\""
                        }
                      ],
                      "id": 11304,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1547:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1547:60:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11314,
                  "nodeType": "ExpressionStatement",
                  "src": "1547:60:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1685:52:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1687:21:20",
                        "value": {
                          "name": "_balances.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1694:14:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1687:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1709:26:20",
                        "value": {
                          "name": "_balances.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1719:16:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1709:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7959,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1719:16:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7959,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1694:14:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1709:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1687:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11315,
                  "nodeType": "InlineAssembly",
                  "src": "1676:61:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11323,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11319,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11317,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1755:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "35",
                            "id": 11318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1763:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_5_by_1",
                              "typeString": "int_const 5"
                            },
                            "value": "5"
                          },
                          "src": "1755:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11320,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "1768:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1778:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1768:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1755:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f62616c616e636573206368616e676564206c6f636174696f6e",
                        "id": 11324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1781:28:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_351c0c64416285a0d8f51f4ab7b97bae516b75137d035631fca76ae99b8bf597",
                          "typeString": "literal_string \"_balances changed location\""
                        },
                        "value": "_balances changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_351c0c64416285a0d8f51f4ab7b97bae516b75137d035631fca76ae99b8bf597",
                          "typeString": "literal_string \"_balances changed location\""
                        }
                      ],
                      "id": 11316,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1746:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11325,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1746:64:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11326,
                  "nodeType": "ExpressionStatement",
                  "src": "1746:64:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1913:56:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1915:23:20",
                        "value": {
                          "name": "_allowances.slot",
                          "nodeType": "YulIdentifier",
                          "src": "1922:16:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "1915:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "1939:28:20",
                        "value": {
                          "name": "_allowances.offset",
                          "nodeType": "YulIdentifier",
                          "src": "1949:18:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1939:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7966,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "1949:18:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7966,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "1922:16:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1939:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1915:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11327,
                  "nodeType": "InlineAssembly",
                  "src": "1904:65:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11329,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "1987:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "36",
                            "id": 11330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1995:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_6_by_1",
                              "typeString": "int_const 6"
                            },
                            "value": "6"
                          },
                          "src": "1987:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11332,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "2000:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2010:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2000:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1987:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f616c6c6f77616e636573206368616e676564206c6f636174696f6e",
                        "id": 11336,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2013:30:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_98da9330bc9672045a33c01921a2e344d60dd07ca326c86e4d212a9b69405049",
                          "typeString": "literal_string \"_allowances changed location\""
                        },
                        "value": "_allowances changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_98da9330bc9672045a33c01921a2e344d60dd07ca326c86e4d212a9b69405049",
                          "typeString": "literal_string \"_allowances changed location\""
                        }
                      ],
                      "id": 11328,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1978:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1978:66:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11338,
                  "nodeType": "ExpressionStatement",
                  "src": "1978:66:20"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "2139:82:20",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "2141:36:20",
                        "value": {
                          "name": "_inactiveAgreementBitmap.slot",
                          "nodeType": "YulIdentifier",
                          "src": "2148:29:20"
                        },
                        "variableNames": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "2141:4:20"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "2178:41:20",
                        "value": {
                          "name": "_inactiveAgreementBitmap.offset",
                          "nodeType": "YulIdentifier",
                          "src": "2188:31:20"
                        },
                        "variableNames": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2178:6:20"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 7971,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "2188:31:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 7971,
                      "isOffset": false,
                      "isSlot": true,
                      "src": "2148:29:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11229,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2178:6:20",
                      "valueSize": 1
                    },
                    {
                      "declaration": 11226,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "2141:4:20",
                      "valueSize": 1
                    }
                  ],
                  "id": 11339,
                  "nodeType": "InlineAssembly",
                  "src": "2130:91:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 11347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11341,
                            "name": "slot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11226,
                            "src": "2239:4:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "37",
                            "id": 11342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2247:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_7_by_1",
                              "typeString": "int_const 7"
                            },
                            "value": "7"
                          },
                          "src": "2239:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 11346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 11344,
                            "name": "offset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11229,
                            "src": "2252:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 11345,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2262:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2252:11:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2239:24:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f696e61637469766541677265656d656e744269746d6170206368616e676564206c6f636174696f6e",
                        "id": 11348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2265:43:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_289bdaaefaa57a189cc9aacece46ff446b744d55829cb4fe6a9a5891c9adc6d9",
                          "typeString": "literal_string \"_inactiveAgreementBitmap changed location\""
                        },
                        "value": "_inactiveAgreementBitmap changed location"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_289bdaaefaa57a189cc9aacece46ff446b744d55829cb4fe6a9a5891c9adc6d9",
                          "typeString": "literal_string \"_inactiveAgreementBitmap changed location\""
                        }
                      ],
                      "id": 11340,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2230:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2230:79:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11350,
                  "nodeType": "ExpressionStatement",
                  "src": "2230:79:20"
                }
              ]
            },
            "functionSelector": "6901f668",
            "id": 11352,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "259:2:20"
            },
            "returnParameters": {
              "id": 11224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "274:0:20"
            },
            "scope": 11353,
            "src": "242:2074:20",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 11354,
        "src": "189:2129:20"
      }
    ],
    "src": "54:2265:20"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.1+commit.f4a555be.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.5",
  "updatedAt": "2020-09-30T18:18:27.104Z",
  "devdoc": {
    "details": "Test SuperTokenStorag Layout changes",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "ERC20.balanceOf implementation"
      },
      "createAgreement(bytes32,bytes32[])": {
        "details": "ISuperToken.createAgreement implementation"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: SuperToken always uses 18 decimals. Note: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "downgrade(uint256)": {
        "details": "ISuperToken.downgrade implementation"
      },
      "getAccountActiveAgreements(address)": {
        "details": "ISuperToken.getAccountActiveAgreements implementation"
      },
      "getAgreementData(address,bytes32,uint256)": {
        "details": "ISuperToken.getAgreementData implementation"
      },
      "getAgreementStateSlot(address,address,uint256,uint256)": {
        "details": "ISuperToken.getAgreementState implementation"
      },
      "getCodeAddress()": {
        "details": "Get current implementation code address."
      },
      "getHost()": {
        "details": "Get the contract address that is hosting this token.",
        "returns": {
          "host": "Superfluid host contract address"
        }
      },
      "getUnderlayingToken()": {
        "details": "ISuperfluidGovernance.getUnderlayingToken implementation"
      },
      "isAccountInsolvent(address)": {
        "details": "ISuperToken.isAccountInsolvent implementation"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "liquidateAgreement(address,bytes32,address,uint256)": {
        "details": "ISuperToken.liquidateAgreement implementation"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "operationApprove(address,address,uint256)": {
        "details": "Perform ERC20 approve by host contract.",
        "params": {
          "account": "The account owner to be approved.",
          "amount": "Number of tokens to be approved.",
          "spender": "The spender of account owner's funds."
        }
      },
      "operationDowngrade(address,uint256)": {
        "details": "Downgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be downgraded (in 18 decimals)"
        }
      },
      "operationTransferFrom(address,address,address,uint256)": {
        "details": "Perform ERC20 transfer from by host contract.",
        "params": {
          "account": "The account to spend sender's funds.",
          "amount": "Number of tokens to be transferred.",
          "recipient": "The recipient of thefunds.",
          "sender": "The account where the funds is sent from."
        }
      },
      "operationUpgrade(address,uint256)": {
        "details": "Upgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be upgraded (in 18 decimals)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading."
      },
      "realtimeBalanceOf(address,uint256)": {
        "details": "ISuperToken.realtimeBalanceOf implementation"
      },
      "realtimeBalanceOfNow(address)": {
        "details": "realtimeBalanceOf with timestamp equals to block.timestamp"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "settleBalance(address,int256)": {
        "details": "Settle balance from an account by the agreement.      The agreement needs to make sure that the balance delta is balanced afterwards",
        "params": {
          "account": "Account to query.",
          "delta": "Amount of balance delta to be settled"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "terminateAgreement(bytes32,uint256)": {
        "details": "ISuperToken.terminateAgreement implementation"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAgreementData(bytes32,bytes32[])": {
        "details": "ISuperToken.updateAgreementData implementation"
      },
      "updateAgreementStateSlot(address,uint256,bytes32[])": {
        "details": "ISuperToken.updateAgreementState implementation"
      },
      "upgrade(uint256)": {
        "details": "ISuperToken.upgrade implementation"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}
